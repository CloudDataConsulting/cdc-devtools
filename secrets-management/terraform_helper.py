"""Helper for Terraform with multiple AWS profiles and secure credential management."""

import json
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Any
import logging

from .base_secrets_manager import CDCSecretsManager

logger = logging.getLogger(__name__)


class TerraformSecretsHelper:
    """Manage Terraform operations with CDC secrets management."""
    
    def __init__(self, secrets_manager: Optional[CDCSecretsManager] = None):
        self.secrets = secrets_manager or CDCSecretsManager()
        self.terraform_dir = Path.cwd() / "terraform"
        
    def setup_providers_file(self, output_file: str = "providers_generated.tf") -> str:
        """
        Generate Terraform providers with credentials from 1Password.
        
        Returns the generated providers configuration.
        """
        template = '''provider "aws" {{
  alias  = "{alias}"
  region = "{region}"
  
  # Credentials managed by CDC DevTools
  access_key = "{access_key}"
  secret_key = "{secret_key}"
  {role_arn_block}
}}
'''
        
        providers = []
        aws_profiles = self.secrets.config.get('secrets', {}).get('aws_profiles', {})
        
        for profile_name, profile_config in aws_profiles.items():
            logger.info(f"Generating provider for AWS profile: {profile_name}")
            
            # Get credentials
            creds = self.secrets.get_aws_profile_config(profile_name)
            
            # Handle optional role assumption
            role_arn_block = ""
            if 'role_arn' in creds:
                role_arn_block = f'''
  assume_role {{
    role_arn = "{creds['role_arn']}"
  }}'''
            
            providers.append(template.format(
                alias=profile_name,
                region=creds.get('region_name', 'us-east-1'),
                access_key=creds['aws_access_key_id'],
                secret_key=creds['aws_secret_access_key'],
                role_arn_block=role_arn_block
            ))
        
        # Add default provider (if specified in config)
        default_profile = self.secrets.config.get('tools', {}).get('terraform', {}).get('default_profile')
        if default_profile and default_profile in aws_profiles:
            logger.info(f"Setting default provider to: {default_profile}")
            default_creds = self.secrets.get_aws_profile_config(default_profile)
            
            providers.insert(0, f'''# Default provider
provider "aws" {{
  region = "{default_creds.get('region_name', 'us-east-1')}"
  
  access_key = "{default_creds['aws_access_key_id']}"
  secret_key = "{default_creds['aws_secret_access_key']}"
}}
''')
        
        # Generate content
        content = f"""# Generated by CDC DevTools - DO NOT EDIT MANUALLY
# This file is auto-generated from config.yaml
# Regenerate with: cdc-terraform generate-providers

terraform {{
  required_version = ">= 1.0"
  
  required_providers {{
    aws = {{
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }}
  }}
}}

{''.join(providers)}

# Example usage:
# resource "aws_s3_bucket" "prod_bucket" {{
#   provider = aws.prod
#   bucket   = "my-prod-bucket"
# }}
#
# resource "aws_s3_bucket" "terraform_state" {{
#   provider = aws.terraform_backend
#   bucket   = "my-terraform-state"
# }}
"""
        
        # Write to file
        output_path = self.terraform_dir / output_file
        output_path.parent.mkdir(exist_ok=True)
        output_path.write_text(content)
        
        logger.info(f"Generated providers file: {output_path}")
        return content
    
    def setup_backend_config(self) -> Dict[str, str]:
        """
        Generate backend configuration for Terraform state storage.
        
        Returns backend configuration values.
        """
        terraform_config = self.secrets.config.get('tools', {}).get('terraform', {})
        backend_profile = terraform_config.get('backend_profile', 'terraform_backend')
        
        # Get backend credentials
        backend_creds = self.secrets.get_aws_profile_config(backend_profile)
        
        # Get backend bucket from config
        backend_bucket = self.secrets.config.get('terraform', {}).get('backend_bucket', 'terraform-state')
        backend_key = self.secrets.config.get('terraform', {}).get('backend_key', 'state/terraform.tfstate')
        backend_region = backend_creds.get('region_name', 'us-east-1')
        
        backend_config = {
            'bucket': backend_bucket,
            'key': backend_key,
            'region': backend_region,
            'access_key': backend_creds['aws_access_key_id'],
            'secret_key': backend_creds['aws_secret_access_key']
        }
        
        # Generate backend.tf
        backend_tf = f"""# Terraform Backend Configuration
# Generated by CDC DevTools

terraform {{
  backend "s3" {{
    bucket = "{backend_bucket}"
    key    = "{backend_key}"
    region = "{backend_region}"
    
    # Credentials are passed via backend-config
    # Run: terraform init -backend-config=backend.hcl
  }}
}}
"""
        
        # Write backend.tf
        backend_tf_path = self.terraform_dir / "backend.tf"
        backend_tf_path.write_text(backend_tf)
        
        # Generate backend.hcl (contains secrets, should be gitignored)
        backend_hcl = f"""# Backend configuration with credentials
# DO NOT COMMIT THIS FILE

access_key = "{backend_creds['aws_access_key_id']}"
secret_key = "{backend_creds['aws_secret_access_key']}"
"""
        
        backend_hcl_path = self.terraform_dir / "backend.hcl"
        backend_hcl_path.write_text(backend_hcl)
        
        # Ensure backend.hcl is gitignored
        gitignore_path = self.terraform_dir / ".gitignore"
        if gitignore_path.exists():
            gitignore_content = gitignore_path.read_text()
            if "backend.hcl" not in gitignore_content:
                gitignore_path.write_text(gitignore_content + "\nbackend.hcl\n")
        else:
            gitignore_path.write_text("backend.hcl\nproviders_generated.tf\n*.tfvars\n")
        
        logger.info(f"Generated backend configuration")
        return backend_config
    
    def generate_tfvars(self, workspace: str = "default") -> Dict[str, Any]:
        """
        Generate terraform.tfvars with secrets for a specific workspace.
        
        Args:
            workspace: Terraform workspace name
            
        Returns:
            Dictionary of variables generated
        """
        tfvars = {}
        
        # Get workspace-specific secrets if defined
        workspace_secrets = self.secrets.config.get('terraform', {}).get('workspaces', {}).get(workspace, {})
        
        # Add common variables
        project_config = self.secrets.config.get('project', {})
        tfvars['project_name'] = project_config.get('name', 'undefined')
        tfvars['environment'] = workspace
        tfvars['client'] = project_config.get('client', 'undefined')
        
        # Add API keys if needed
        api_keys = self.secrets.config.get('secrets', {}).get('api_keys', {})
        for api_name in api_keys:
            var_name = f"{api_name}_api_key"
            tfvars[var_name] = self.secrets.get_api_key(api_name)
        
        # Add database endpoints if needed
        databases = self.secrets.config.get('secrets', {}).get('databases', {})
        for db_name, db_config in databases.items():
            if 'host' in db_config:
                tfvars[f"{db_name}_host"] = db_config['host']
            if 'port' in db_config:
                tfvars[f"{db_name}_port"] = db_config['port']
        
        # Write tfvars file
        tfvars_path = self.terraform_dir / f"{workspace}.tfvars"
        with open(tfvars_path, 'w') as f:
            f.write(f"# Terraform variables for {workspace} workspace\n")
            f.write("# Generated by CDC DevTools\n\n")
            
            for key, value in tfvars.items():
                if isinstance(value, str):
                    f.write(f'{key} = "{value}"\n')
                else:
                    f.write(f'{key} = {json.dumps(value)}\n')
        
        logger.info(f"Generated tfvars for workspace: {workspace}")
        return tfvars
    
    def run_terraform_with_creds(self, command: List[str], profile: Optional[str] = None) -> subprocess.CompletedProcess:
        """
        Run Terraform command with proper credentials.
        
        Args:
            command: Terraform command and arguments
            profile: AWS profile to use (defaults to terraform config)
            
        Returns:
            Completed process result
        """
        # Get the profile to use
        if profile is None:
            terraform_config = self.secrets.config.get('tools', {}).get('terraform', {})
            profile = terraform_config.get('default_profile', 'prod')
        
        # Get credentials
        creds = self.secrets.get_aws_profile_config(profile)
        
        # Set up environment
        env = {
            **subprocess.os.environ,
            'AWS_ACCESS_KEY_ID': creds['aws_access_key_id'],
            'AWS_SECRET_ACCESS_KEY': creds['aws_secret_access_key'],
            'AWS_DEFAULT_REGION': creds.get('region_name', 'us-east-1')
        }
        
        # Run terraform
        logger.info(f"Running terraform with profile '{profile}': {' '.join(command)}")
        result = subprocess.run(
            ['terraform'] + command,
            cwd=self.terraform_dir,
            env=env,
            capture_output=True,
            text=True
        )
        
        if result.returncode != 0:
            logger.error(f"Terraform command failed: {result.stderr}")
        
        return result
    
    def init_with_backend(self) -> bool:
        """Initialize Terraform with backend configuration."""
        # Generate backend config
        self.setup_backend_config()
        
        # Run terraform init
        result = self.run_terraform_with_creds([
            'init',
            '-backend-config=backend.hcl',
            '-reconfigure'
        ])
        
        return result.returncode == 0
    
    def workspace_select(self, workspace: str) -> bool:
        """Select or create a Terraform workspace."""
        # Try to select workspace
        result = self.run_terraform_with_creds(['workspace', 'select', workspace])
        
        if result.returncode != 0:
            # Workspace doesn't exist, create it
            logger.info(f"Creating new workspace: {workspace}")
            result = self.run_terraform_with_creds(['workspace', 'new', workspace])
        
        return result.returncode == 0
    
    def plan_with_vars(self, workspace: str = "default", output_file: Optional[str] = None) -> bool:
        """Run terraform plan with workspace-specific variables."""
        # Select workspace
        if not self.workspace_select(workspace):
            return False
        
        # Generate tfvars
        self.generate_tfvars(workspace)
        
        # Build plan command
        cmd = ['plan', f'-var-file={workspace}.tfvars']
        if output_file:
            cmd.append(f'-out={output_file}')
        
        # Run plan
        result = self.run_terraform_with_creds(cmd)
        
        return result.returncode == 0
    
    def apply_with_vars(self, workspace: str = "default", auto_approve: bool = False) -> bool:
        """Run terraform apply with workspace-specific variables."""
        # Select workspace
        if not self.workspace_select(workspace):
            return False
        
        # Generate tfvars
        self.generate_tfvars(workspace)
        
        # Build apply command
        cmd = ['apply', f'-var-file={workspace}.tfvars']
        if auto_approve:
            cmd.append('-auto-approve')
        
        # Run apply
        result = self.run_terraform_with_creds(cmd)
        
        return result.returncode == 0


# CLI Integration Example
def main():
    """Example CLI usage of TerraformSecretsHelper."""
    import argparse
    
    parser = argparse.ArgumentParser(description="CDC Terraform Helper")
    parser.add_argument('action', choices=['init', 'plan', 'apply', 'generate-providers'])
    parser.add_argument('--workspace', default='default', help='Terraform workspace')
    parser.add_argument('--auto-approve', action='store_true', help='Auto-approve apply')
    
    args = parser.parse_args()
    
    # Initialize helper
    helper = TerraformSecretsHelper()
    
    if args.action == 'generate-providers':
        helper.setup_providers_file()
        print("✅ Generated providers_generated.tf")
        
    elif args.action == 'init':
        if helper.init_with_backend():
            print("✅ Terraform initialized with backend")
        else:
            print("❌ Terraform init failed")
            
    elif args.action == 'plan':
        if helper.plan_with_vars(args.workspace):
            print(f"✅ Terraform plan completed for {args.workspace}")
        else:
            print("❌ Terraform plan failed")
            
    elif args.action == 'apply':
        if helper.apply_with_vars(args.workspace, args.auto_approve):
            print(f"✅ Terraform apply completed for {args.workspace}")
        else:
            print("❌ Terraform apply failed")


if __name__ == "__main__":
    main()