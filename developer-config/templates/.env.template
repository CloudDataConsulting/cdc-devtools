#!/usr/bin/env bash
# CDC Project Environment Template
# Copy this file to env.sh and customize for your project

# ============================================================================
# Project Identification
# ============================================================================
export PROJECT_NAME="PROJECT_NAME_HERE"
export PROJECT_ENV="${PROJECT_ENV:-dev}"  # dev, tst, prd
export PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# ============================================================================
# AWS Configuration
# ============================================================================
export AWS_PROFILE="${PROJECT_NAME}-${PROJECT_ENV}"
export AWS_REGION="us-east-1"
export AWS_DEFAULT_REGION="$AWS_REGION"

# S3 Buckets
export S3_DATA_BUCKET="${PROJECT_NAME}-data-${PROJECT_ENV}"
export S3_CONFIG_BUCKET="${PROJECT_NAME}-config-${PROJECT_ENV}"
export S3_LOGS_BUCKET="${PROJECT_NAME}-logs-${PROJECT_ENV}"

# ============================================================================
# Snowflake Configuration
# ============================================================================
export SNOWFLAKE_ACCOUNT="ACCOUNT_NAME_HERE"
export SNOWFLAKE_USER="${SNOWFLAKE_USER:-$USER@clouddataconsulting.com}"
export SNOWFLAKE_ROLE="${PROJECT_NAME}_${PROJECT_ENV}_ROLE"
export SNOWFLAKE_WAREHOUSE="${PROJECT_NAME}_${PROJECT_ENV}_WH"
export SNOWFLAKE_DATABASE="${PROJECT_NAME}_${PROJECT_ENV}"
export SNOWFLAKE_SCHEMA="PUBLIC"

# Snowflake credentials (use 1Password or environment-specific method)
# export SNOWFLAKE_PASSWORD=$(op read "op://vault/item/password")
# export SNOWFLAKE_PRIVATE_KEY_PATH="$HOME/.ssh/snowflake_${PROJECT_NAME}_key.p8"

# ============================================================================
# Database/API Connections
# ============================================================================
# export DATABASE_URL="postgresql://user:pass@host:5432/dbname"
# export API_BASE_URL="https://api.example.com"
# export API_KEY=$(op read "op://vault/api-key/credential")

# ============================================================================
# Application Configuration
# ============================================================================
export LOG_LEVEL="${LOG_LEVEL:-INFO}"
export DEBUG="${DEBUG:-false}"

# Python
export PYTHONPATH="${PROJECT_ROOT}/src:${PYTHONPATH}"

# Node.js
export NODE_ENV="${PROJECT_ENV}"

# ============================================================================
# Development Tools
# ============================================================================
# DBT
export DBT_PROFILES_DIR="${PROJECT_ROOT}/dbt"
export DBT_PROJECT_DIR="${PROJECT_ROOT}/dbt"

# Terraform
export TF_VAR_project_name="$PROJECT_NAME"
export TF_VAR_environment="$PROJECT_ENV"

# ============================================================================
# Path Configuration
# ============================================================================
# Add project bins to PATH
export PATH="${PROJECT_ROOT}/bin:${PATH}"

# ============================================================================
# Helper Functions
# ============================================================================

# Validate environment is properly configured
validate_env() {
    local errors=0
    
    echo "üîç Validating environment configuration..."
    
    # Check required variables
    if [[ -z "$PROJECT_NAME" ]]; then
        echo "‚ùå PROJECT_NAME is not set"
        ((errors++))
    fi
    
    if [[ -z "$AWS_PROFILE" ]]; then
        echo "‚ùå AWS_PROFILE is not set"
        ((errors++))
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &>/dev/null; then
        echo "‚ùå AWS credentials not valid for profile: $AWS_PROFILE"
        ((errors++))
    else
        echo "‚úÖ AWS credentials valid"
    fi
    
    # Check optional tools
    command -v terraform &>/dev/null && echo "‚úÖ Terraform available" || echo "‚ÑπÔ∏è  Terraform not found"
    command -v dbt &>/dev/null && echo "‚úÖ DBT available" || echo "‚ÑπÔ∏è  DBT not found"
    
    if [[ $errors -eq 0 ]]; then
        echo "‚úÖ Environment validation passed"
        return 0
    else
        echo "‚ùå Environment validation failed with $errors errors"
        return 1
    fi
}

# Show current environment
show_env() {
    echo "üåç Current Environment:"
    echo "   Project: $PROJECT_NAME"
    echo "   Environment: $PROJECT_ENV"
    echo "   AWS Profile: $AWS_PROFILE"
    echo "   AWS Region: $AWS_REGION"
    if [[ -n "$SNOWFLAKE_ACCOUNT" ]]; then
        echo "   Snowflake Account: $SNOWFLAKE_ACCOUNT"
        echo "   Snowflake Database: $SNOWFLAKE_DATABASE"
    fi
}

# ============================================================================
# Auto-execution
# ============================================================================

# Show environment on load
echo "üöÄ Loading $PROJECT_NAME environment ($PROJECT_ENV)"
show_env

# Optional: Auto-validate
# validate_env