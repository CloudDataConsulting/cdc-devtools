# CDC Developer Bash Configuration Template
# Copy relevant sections to your ~/.bashrc

# ============================================================================
# CDC Developer Configuration
# ============================================================================
export CDC_WORKSPACE="${CDC_WORKSPACE:-$HOME/repos/cdc}"
export CDC_CONFIG_DIR="$HOME/.cdc"
export CDC_DEVTOOLS_PATH="$CDC_WORKSPACE/cdc-devtools"

# Source CDC configurations if they exist
[[ -f "$CDC_CONFIG_DIR/aliases.sh" ]] && source "$CDC_CONFIG_DIR/aliases.sh"
[[ -f "$CDC_CONFIG_DIR/functions.sh" ]] && source "$CDC_CONFIG_DIR/functions.sh"

# Source personal configurations if they exist
[[ -f "$HOME/.cdc_personal" ]] && source "$HOME/.cdc_personal"
[[ -f "$HOME/.cdc_clients" ]] && source "$HOME/.cdc_clients"
[[ -f "$HOME/.cdc_env" ]] && source "$HOME/.cdc_env"

# ============================================================================
# Environment Variables
# ============================================================================

# Editor
export EDITOR='vim'
export VISUAL='vim'

# Language settings
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'

# History
export HISTFILE="$HOME/.bash_history"
export HISTSIZE=50000
export HISTFILESIZE=50000
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE="ls:ll:la:l:cd:pwd:exit:clear:history"

# ============================================================================
# Bash Options
# ============================================================================

# Append to history instead of overwriting
shopt -s histappend

# Check window size after each command
shopt -s checkwinsize

# Extended pattern matching
shopt -s extglob

# Case-insensitive globbing
shopt -s nocaseglob

# Autocorrect typos in path names
shopt -s cdspell

# Enable programmable completion
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# ============================================================================
# Prompt
# ============================================================================

# Simple prompt with git branch
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Color definitions
RED='\[\033[0;31m\]'
GREEN='\[\033[0;32m\]'
YELLOW='\[\033[0;33m\]'
BLUE='\[\033[0;34m\]'
PURPLE='\[\033[0;35m\]'
CYAN='\[\033[0;36m\]'
WHITE='\[\033[0;37m\]'
RESET='\[\033[0m\]'

# Set prompt
PS1="${BLUE}\w${RESET} ${YELLOW}\$(parse_git_branch)${RESET} \$ "

# ============================================================================
# Tool Integrations
# ============================================================================

# Homebrew (macOS)
if [[ -f "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -f "/usr/local/bin/brew" ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
fi

# NVM (Node Version Manager)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# PyEnv
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
fi

# AWS CLI completion
if command -v aws_completer 1>/dev/null 2>&1; then
    complete -C aws_completer aws
fi

# Terraform completion
if command -v terraform 1>/dev/null 2>&1; then
    complete -C terraform terraform
fi

# Git completion (if not already loaded)
if [ -f /usr/share/bash-completion/completions/git ]; then
    . /usr/share/bash-completion/completions/git
elif [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
    . /usr/local/etc/bash_completion.d/git-completion.bash
fi

# ============================================================================
# Utility Functions
# ============================================================================

# Create and enter directory
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract archives
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# ============================================================================
# Local Configuration
# ============================================================================

# Source local bash configuration if it exists
[[ -f "$HOME/.bashrc.local" ]] && source "$HOME/.bashrc.local"